@page "/grid"

@using System.Timers;

<EjsButton OnClick="ReorderBtn" CssClass="e-primary" IsPrimary="true" Content="Reorder Freight"></EjsButton>
<EjsButton OnClick="ToggleColumnVisibility" CssClass="e-primary" IsPrimary="true" Content="Toggle Column Visibility"></EjsButton>
<EjsGrid @ref="DefaultGrid" @ref:suppressField TValue="Order" ModelType="@Model"
         AllowPaging="true"
         AllowSorting="true"
         AllowExcelExport="true"
         AllowFiltering="true"
         AllowGrouping="true"
         AllowMultiSorting="true"
         AllowResizing="true"
         AllowRowDragAndDrop="true"
         AllowReordering="true"
         AllowPdfExport="true"
         Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search", "Print", "ExcelExport", "PdfExport" })"
         DataSource="@Orders">
    <GridTemplates>
        <DetailTemplate>
            @{
                var order = (context as Order);
                <table class="detailtable" width="100%">
                    <colgroup>
                        <col width="35%">
                        <col width="35%">
                        <col width="30%">
                    </colgroup>
                    <tbody>
                                    <tr>
                                        <td>
                                            @order.ShipDate
                                        </td>
                                        <td>
                                            @order.City
                                        </td>
                                        <td>
                                            @order.Country
                                        </td>
                                    </tr>
                    </tbody>
                </table>
            }
        </DetailTemplate>
    </GridTemplates>
    @*<EjsDataManager Url="https://services.odata.org/V4/Northwind/Northwind.svc/Orders/" Adaptor="Adaptors.ODataV4Adaptor"></EjsDataManager>*@
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.EJ2.Blazor.Grids.EditMode.Dialog" ShowDeleteConfirmDialog="true"></GridEditSettings>
    <GridEvents TValue="Order" RowDataBound="RowBound"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150" Visible="@ShowCustomerId">
            <Template>
                @{
                    if (ShowCustomerId)
                    {
                        var order = (context as Order);
                        @order.CustomerID
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="yMd" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</EjsGrid>

<style type="text/css" class="cssStyles">
    /*.e-grid .e-altrow {
        background-color: #fafafa;
    }*/

    .below-25 {
        background-color: orangered;
    }

    .below-35 {
        background-color: yellow;
    }

    .above-35 {
        background-color: greenyellow
    }
</style>


@code{

    private EjsGrid<Order> DefaultGrid;

    public Order Model = new Order();

    public bool ShowCustomerId = true;

    private Timer DataTimer;

    private int Index = 80;

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
        public DateTime? ShipDate { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }

    public List<Order> Orders { get; set; }

    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 75).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
            ShipDate = DateTime.Now.AddDays(-x),
            City = (new string[] { "Seattle", "Tacoma", "Redmond", "Kirkland", "London" })[new Random().Next(5)],
            Country = (new string[] { "USA", "UK" })[new Random().Next(2)],
        }).ToList();

        if (DataTimer == null)
        {
            DataTimer = new Timer(5000);
            DataTimer.Elapsed += AddData;
            DataTimer.AutoReset = true;
        }

        DataTimer.Start();
    }

    private void AddData(object source, ElapsedEventArgs args)
    {
        Orders.Add(new Order()
        {
            OrderID = 1000 + Index,
            CustomerID = (new string[] { "ZZZZZ", "YYYYY", "XXXXX", "WWWWW", "VVVVV" })[new Random().Next(5)],
            Freight = 2.1 * Index,
            OrderDate = DateTime.Now.AddDays(-Index),
            ShipDate = DateTime.Now.AddDays(-Index),
            City = (new string[] { "Seattle", "Tacoma", "Redmond", "Kirkland", "London" })[new Random().Next(5)],
            Country = (new string[] { "USA", "UK" })[new Random().Next(2)],
        });

        Index++;

        DefaultGrid.Refresh();
    }

    public void ReorderBtn()
    {
        this.DefaultGrid.ReorderColumns("Freight", "OrderDate");
    }

    public void ToggleColumnVisibility()
    {
        ShowCustomerId = !ShowCustomerId;
    }

    public void RowBound(RowDataBoundEventArgs<Order> args)
    {
        if (args.Data.Freight < 10)
        {
            args.Row.AddClass(new string[] { "below-25" });
        }
        else if (args.Data.Freight < 35)
        {
            args.Row.AddClass(new string[] { "below-35" });
        }
        else
        {
            args.Row.AddClass(new string[] { "above-35" });
        }
    }
}